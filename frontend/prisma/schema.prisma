// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    UserData      UserData?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ---------------------------- auth models end

enum Role {
    ADMIN
    INITIAL_USER
    USER
}

// user's data not related to auth
model UserData {
    id           String      @id @default(cuid())
    user         User        @relation(fields: [id], references: [id], onDelete: Cascade)
    username     String      @unique
    display_name String
    GameMatch    GameMatch[]
    type         Role

    @@index([id])
}

model Team {
    id          String      @id @default(cuid())
    name        String      @db.VarChar(50)
    league      String?     @db.VarChar(50)
    homeMatches GameMatch[] @relation("teamHome")
    awayMatches GameMatch[] @relation("teamAway")
}

enum MatchVisibility {
    PUBLIC
    PRIVATE
}

model GameMatch {
    match_id    String          @id @default(cuid())
    user_id     String
    public      MatchVisibility @default(PUBLIC)
    name        String?         @db.VarChar(50) // name given by user for match
    teamid_home String?
    teamid_away String?
    date        DateTime? // date match was uploaded
    user        UserData        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    teamHome    Team?           @relation(fields: [teamid_home], references: [id], onDelete: SetNull, name: "teamHome")
    teamAway    Team?           @relation(fields: [teamid_away], references: [id], onDelete: SetNull, name: "teamAway")
    Viz         Viz[]
    localization_video String?        @db.VarChar(250) // URL or path to the localization video
    generated_video    String?        @db.VarChar(250) // URL or path to the generated video
    thumbnail_url      String?        @db.VarChar(250) // URL or path to the thumbnail image

    @@index([user_id])
    @@index([teamid_home])
    @@index([teamid_away])
}

model Viz {
    viz_id    String    @id @default(cuid())
    match_id  String
    name      String    @db.VarChar(250)
    descr     String?   @db.VarChar(1000)
    url       String    @db.VarChar(250)
    Viz_Match GameMatch @relation(fields: [match_id], references: [match_id], onDelete: Cascade)

    @@index([match_id])
}
